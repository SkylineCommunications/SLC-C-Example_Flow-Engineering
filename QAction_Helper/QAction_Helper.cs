// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 9000000 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int clp_interapp_receive_9000000 = 9000000;
	/// <summary>PID: 9000000 | Type: read</summary>
	public const int clp_interapp_receive = 9000000;
	/// <summary>PID: 9000001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int clp_interapp_return_9000001 = 9000001;
	/// <summary>PID: 9000001 | Type: read</summary>
	public const int clp_interapp_return = 9000001;
	public class Write
	{
		/// <summary>PID: 1000158 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int fleincomingflowstableexpectedrxbitrate_1000158 = 1000158;
		/// <summary>PID: 1000158 | Type: write</summary>
		public const int fleincomingflowstableexpectedrxbitrate = 1000158;
		/// <summary>PID: 1000258 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int fleoutgoingflowstableexpectedtxbitrate_1000258 = 1000258;
		/// <summary>PID: 1000258 | Type: write</summary>
		public const int fleoutgoingflowstableexpectedtxbitrate = 1000258;
	}
	public class Fleinterfacesoverviewtable
	{
		/// <summary>PID: 1000000</summary>
		public const int tablePid = 1000000;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1000001</summary>
		public const int indexColumnPid = 1000001;
		public class Pid
		{
			/// <summary>PID: 1000001 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableindex_1000001 = 1000001;
			/// <summary>PID: 1000001 | Type: read</summary>
			public const int fleinterfacesoverviewtableindex = 1000001;
			/// <summary>PID: 1000002 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledescription_1000002 = 1000002;
			/// <summary>PID: 1000002 | Type: read</summary>
			public const int fleinterfacesoverviewtabledescription = 1000002;
			/// <summary>PID: 1000003 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletype_1000003 = 1000003;
			/// <summary>PID: 1000003 | Type: read</summary>
			public const int fleinterfacesoverviewtabletype = 1000003;
			/// <summary>PID: 1000004 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableadminstatus_1000004 = 1000004;
			/// <summary>PID: 1000004 | Type: read</summary>
			public const int fleinterfacesoverviewtableadminstatus = 1000004;
			/// <summary>PID: 1000005 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableoperstatus_1000005 = 1000005;
			/// <summary>PID: 1000005 | Type: read</summary>
			public const int fleinterfacesoverviewtableoperstatus = 1000005;
			/// <summary>PID: 1000006 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledisplaykey_1000006 = 1000006;
			/// <summary>PID: 1000006 | Type: read</summary>
			public const int fleinterfacesoverviewtabledisplaykey = 1000006;
			/// <summary>PID: 1000007 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxbitrate_1000007 = 1000007;
			/// <summary>PID: 1000007 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxbitrate = 1000007;
			/// <summary>PID: 1000008 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxflows_1000008 = 1000008;
			/// <summary>PID: 1000008 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxflows = 1000008;
			/// <summary>PID: 1000009 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxbitrate_1000009 = 1000009;
			/// <summary>PID: 1000009 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxbitrate = 1000009;
			/// <summary>PID: 1000010 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxflows_1000010 = 1000010;
			/// <summary>PID: 1000010 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxflows = 1000010;
			/// <summary>PID: 1000011 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxutilization_1000011 = 1000011;
			/// <summary>PID: 1000011 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxutilization = 1000011;
			/// <summary>PID: 1000012 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxutilization_1000012 = 1000012;
			/// <summary>PID: 1000012 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxutilization = 1000012;
			/// <summary>PID: 1000013 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxbitrate_1000013 = 1000013;
			/// <summary>PID: 1000013 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxbitrate = 1000013;
			/// <summary>PID: 1000014 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxbitratestatus_1000014 = 1000014;
			/// <summary>PID: 1000014 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxbitratestatus = 1000014;
			/// <summary>PID: 1000015 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxflows_1000015 = 1000015;
			/// <summary>PID: 1000015 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxflows = 1000015;
			/// <summary>PID: 1000016 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxflowsstatus_1000016 = 1000016;
			/// <summary>PID: 1000016 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxflowsstatus = 1000016;
			/// <summary>PID: 1000017 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxbitrate_1000017 = 1000017;
			/// <summary>PID: 1000017 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxbitrate = 1000017;
			/// <summary>PID: 1000018 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxbitratestatus_1000018 = 1000018;
			/// <summary>PID: 1000018 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxbitratestatus = 1000018;
			/// <summary>PID: 1000019 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxflows_1000019 = 1000019;
			/// <summary>PID: 1000019 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxflows = 1000019;
			/// <summary>PID: 1000020 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxflowsstatus_1000020 = 1000020;
			/// <summary>PID: 1000020 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxflowsstatus = 1000020;
			/// <summary>PID: 1000021 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledcfinterfaceid_1000021 = 1000021;
			/// <summary>PID: 1000021 | Type: read</summary>
			public const int fleinterfacesoverviewtabledcfinterfaceid = 1000021;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableindex_1000001 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int fleinterfacesoverviewtableindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledescription_1000002 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int fleinterfacesoverviewtabledescription = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletype_1000003 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int fleinterfacesoverviewtabletype = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableadminstatus_1000004 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int fleinterfacesoverviewtableadminstatus = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableoperstatus_1000005 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int fleinterfacesoverviewtableoperstatus = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledisplaykey_1000006 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int fleinterfacesoverviewtabledisplaykey = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxbitrate_1000007 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxbitrate = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxflows_1000008 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxflows = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxbitrate_1000009 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxbitrate = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxflows_1000010 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxflows = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtablerxutilization_1000011 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int fleinterfacesoverviewtablerxutilization = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabletxutilization_1000012 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int fleinterfacesoverviewtabletxutilization = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxbitrate_1000013 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxbitrate = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxbitratestatus_1000014 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxbitratestatus = 13;
			/// <summary>IDX: 14 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxflows_1000015 = 14;
			/// <summary>IDX: 14 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxflows = 14;
			/// <summary>IDX: 15 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedrxflowsstatus_1000016 = 15;
			/// <summary>IDX: 15 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedrxflowsstatus = 15;
			/// <summary>IDX: 16 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxbitrate_1000017 = 16;
			/// <summary>IDX: 16 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxbitrate = 16;
			/// <summary>IDX: 17 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxbitratestatus_1000018 = 17;
			/// <summary>IDX: 17 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxbitratestatus = 17;
			/// <summary>IDX: 18 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxflows_1000019 = 18;
			/// <summary>IDX: 18 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxflows = 18;
			/// <summary>IDX: 19 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtableexpectedtxflowsstatus_1000020 = 19;
			/// <summary>IDX: 19 | Type: read</summary>
			public const int fleinterfacesoverviewtableexpectedtxflowsstatus = 19;
			/// <summary>IDX: 20 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleinterfacesoverviewtabledcfinterfaceid_1000021 = 20;
			/// <summary>IDX: 20 | Type: read</summary>
			public const int fleinterfacesoverviewtabledcfinterfaceid = 20;
		}
	}
	public class Fleincomingflowstable
	{
		/// <summary>PID: 1000100</summary>
		public const int tablePid = 1000100;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1000101</summary>
		public const int indexColumnPid = 1000101;
		public class Pid
		{
			/// <summary>PID: 1000101 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableinstance_1000101 = 1000101;
			/// <summary>PID: 1000101 | Type: read</summary>
			public const int fleincomingflowstableinstance = 1000101;
			/// <summary>PID: 1000102 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabledestinationip_1000102 = 1000102;
			/// <summary>PID: 1000102 | Type: read</summary>
			public const int fleincomingflowstabledestinationip = 1000102;
			/// <summary>PID: 1000103 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabledestinationport_1000103 = 1000103;
			/// <summary>PID: 1000103 | Type: read</summary>
			public const int fleincomingflowstabledestinationport = 1000103;
			/// <summary>PID: 1000104 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablesourceip_1000104 = 1000104;
			/// <summary>PID: 1000104 | Type: read</summary>
			public const int fleincomingflowstablesourceip = 1000104;
			/// <summary>PID: 1000105 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableincominginterface_1000105 = 1000105;
			/// <summary>PID: 1000105 | Type: read</summary>
			public const int fleincomingflowstableincominginterface = 1000105;
			/// <summary>PID: 1000106 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabletransporttype_1000106 = 1000106;
			/// <summary>PID: 1000106 | Type: read</summary>
			public const int fleincomingflowstabletransporttype = 1000106;
			/// <summary>PID: 1000107 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablerxbitrate_1000107 = 1000107;
			/// <summary>PID: 1000107 | Type: read</summary>
			public const int fleincomingflowstablerxbitrate = 1000107;
			/// <summary>PID: 1000108 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableexpectedrxbitrate_1000108 = 1000108;
			/// <summary>PID: 1000108 | Type: read</summary>
			public const int fleincomingflowstableexpectedrxbitrate = 1000108;
			/// <summary>PID: 1000109 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableexpectedrxbitratestatus_1000109 = 1000109;
			/// <summary>PID: 1000109 | Type: read</summary>
			public const int fleincomingflowstableexpectedrxbitratestatus = 1000109;
			/// <summary>PID: 1000110 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablelabel_1000110 = 1000110;
			/// <summary>PID: 1000110 | Type: read</summary>
			public const int fleincomingflowstablelabel = 1000110;
			/// <summary>PID: 1000111 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablefkoutgoing_1000111 = 1000111;
			/// <summary>PID: 1000111 | Type: read</summary>
			public const int fleincomingflowstablefkoutgoing = 1000111;
			/// <summary>PID: 1000112 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablelinkedflow_1000112 = 1000112;
			/// <summary>PID: 1000112 | Type: read</summary>
			public const int fleincomingflowstablelinkedflow = 1000112;
			/// <summary>PID: 1000113 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableflowowner_1000113 = 1000113;
			/// <summary>PID: 1000113 | Type: read</summary>
			public const int fleincomingflowstableflowowner = 1000113;
			/// <summary>PID: 1000114 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablepresent_1000114 = 1000114;
			/// <summary>PID: 1000114 | Type: read</summary>
			public const int fleincomingflowstablepresent = 1000114;
			public class Write
			{
				/// <summary>PID: 1000165 | Type: write</summary>
				[EditorBrowsable(EditorBrowsableState.Never)]
				public const int fleincomingflowstabledelete_1000165 = 1000165;
				/// <summary>PID: 1000165 | Type: write</summary>
				public const int fleincomingflowstabledelete = 1000165;
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableinstance_1000101 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int fleincomingflowstableinstance = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabledestinationip_1000102 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int fleincomingflowstabledestinationip = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabledestinationport_1000103 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int fleincomingflowstabledestinationport = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablesourceip_1000104 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int fleincomingflowstablesourceip = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableincominginterface_1000105 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int fleincomingflowstableincominginterface = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstabletransporttype_1000106 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int fleincomingflowstabletransporttype = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablerxbitrate_1000107 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int fleincomingflowstablerxbitrate = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableexpectedrxbitrate_1000108 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int fleincomingflowstableexpectedrxbitrate = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableexpectedrxbitratestatus_1000109 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int fleincomingflowstableexpectedrxbitratestatus = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablelabel_1000110 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int fleincomingflowstablelabel = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablefkoutgoing_1000111 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int fleincomingflowstablefkoutgoing = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablelinkedflow_1000112 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int fleincomingflowstablelinkedflow = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstableflowowner_1000113 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int fleincomingflowstableflowowner = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleincomingflowstablepresent_1000114 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int fleincomingflowstablepresent = 13;
		}
	}
	public class Fleoutgoingflowstable
	{
		/// <summary>PID: 1000200</summary>
		public const int tablePid = 1000200;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1000201</summary>
		public const int indexColumnPid = 1000201;
		public class Pid
		{
			/// <summary>PID: 1000201 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableinstance_1000201 = 1000201;
			/// <summary>PID: 1000201 | Type: read</summary>
			public const int fleoutgoingflowstableinstance = 1000201;
			/// <summary>PID: 1000202 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabledestinationip_1000202 = 1000202;
			/// <summary>PID: 1000202 | Type: read</summary>
			public const int fleoutgoingflowstabledestinationip = 1000202;
			/// <summary>PID: 1000203 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabledestinationport_1000203 = 1000203;
			/// <summary>PID: 1000203 | Type: read</summary>
			public const int fleoutgoingflowstabledestinationport = 1000203;
			/// <summary>PID: 1000204 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablesourceip_1000204 = 1000204;
			/// <summary>PID: 1000204 | Type: read</summary>
			public const int fleoutgoingflowstablesourceip = 1000204;
			/// <summary>PID: 1000205 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableoutgoinginterface_1000205 = 1000205;
			/// <summary>PID: 1000205 | Type: read</summary>
			public const int fleoutgoingflowstableoutgoinginterface = 1000205;
			/// <summary>PID: 1000206 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabletransporttype_1000206 = 1000206;
			/// <summary>PID: 1000206 | Type: read</summary>
			public const int fleoutgoingflowstabletransporttype = 1000206;
			/// <summary>PID: 1000207 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabletxbitrate_1000207 = 1000207;
			/// <summary>PID: 1000207 | Type: read</summary>
			public const int fleoutgoingflowstabletxbitrate = 1000207;
			/// <summary>PID: 1000208 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableexpectedtxbitrate_1000208 = 1000208;
			/// <summary>PID: 1000208 | Type: read</summary>
			public const int fleoutgoingflowstableexpectedtxbitrate = 1000208;
			/// <summary>PID: 1000209 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableexpectedtxbitratestatus_1000209 = 1000209;
			/// <summary>PID: 1000209 | Type: read</summary>
			public const int fleoutgoingflowstableexpectedtxbitratestatus = 1000209;
			/// <summary>PID: 1000210 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablelabel_1000210 = 1000210;
			/// <summary>PID: 1000210 | Type: read</summary>
			public const int fleoutgoingflowstablelabel = 1000210;
			/// <summary>PID: 1000211 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablefkincoming_1000211 = 1000211;
			/// <summary>PID: 1000211 | Type: read</summary>
			public const int fleoutgoingflowstablefkincoming = 1000211;
			/// <summary>PID: 1000212 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablelinkedflow_1000212 = 1000212;
			/// <summary>PID: 1000212 | Type: read</summary>
			public const int fleoutgoingflowstablelinkedflow = 1000212;
			/// <summary>PID: 1000213 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableflowowner_1000213 = 1000213;
			/// <summary>PID: 1000213 | Type: read</summary>
			public const int fleoutgoingflowstableflowowner = 1000213;
			/// <summary>PID: 1000214 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablepresent_1000214 = 1000214;
			/// <summary>PID: 1000214 | Type: read</summary>
			public const int fleoutgoingflowstablepresent = 1000214;
			public class Write
			{
				/// <summary>PID: 1000265 | Type: write</summary>
				[EditorBrowsable(EditorBrowsableState.Never)]
				public const int fleoutgoingflowstabledelete_1000265 = 1000265;
				/// <summary>PID: 1000265 | Type: write</summary>
				public const int fleoutgoingflowstabledelete = 1000265;
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableinstance_1000201 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int fleoutgoingflowstableinstance = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabledestinationip_1000202 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int fleoutgoingflowstabledestinationip = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabledestinationport_1000203 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int fleoutgoingflowstabledestinationport = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablesourceip_1000204 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int fleoutgoingflowstablesourceip = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableoutgoinginterface_1000205 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int fleoutgoingflowstableoutgoinginterface = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabletransporttype_1000206 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int fleoutgoingflowstabletransporttype = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstabletxbitrate_1000207 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int fleoutgoingflowstabletxbitrate = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableexpectedtxbitrate_1000208 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int fleoutgoingflowstableexpectedtxbitrate = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableexpectedtxbitratestatus_1000209 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int fleoutgoingflowstableexpectedtxbitratestatus = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablelabel_1000210 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int fleoutgoingflowstablelabel = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablefkincoming_1000211 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int fleoutgoingflowstablefkincoming = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablelinkedflow_1000212 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int fleoutgoingflowstablelinkedflow = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstableflowowner_1000213 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int fleoutgoingflowstableflowowner = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleoutgoingflowstablepresent_1000214 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int fleoutgoingflowstablepresent = 13;
		}
	}
	public class Fleprovisionedflowstable
	{
		/// <summary>PID: 1000300</summary>
		public const int tablePid = 1000300;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1000301</summary>
		public const int indexColumnPid = 1000301;
		public class Pid
		{
			/// <summary>PID: 1000301 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableid_1000301 = 1000301;
			/// <summary>PID: 1000301 | Type: read</summary>
			public const int fleprovisionedflowstableid = 1000301;
			/// <summary>PID: 1000302 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstablesourceid_1000302 = 1000302;
			/// <summary>PID: 1000302 | Type: read</summary>
			public const int fleprovisionedflowstablesourceid = 1000302;
			/// <summary>PID: 1000303 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationid_1000303 = 1000303;
			/// <summary>PID: 1000303 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationid = 1000303;
			/// <summary>PID: 1000304 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableincomingdcfinterfaceid_1000304 = 1000304;
			/// <summary>PID: 1000304 | Type: read</summary>
			public const int fleprovisionedflowstableincomingdcfinterfaceid = 1000304;
			/// <summary>PID: 1000305 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableincomingdcfinterfacedynamiclink_1000305 = 1000305;
			/// <summary>PID: 1000305 | Type: read</summary>
			public const int fleprovisionedflowstableincomingdcfinterfacedynamiclink = 1000305;
			/// <summary>PID: 1000306 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoutgoingdcfinterfaceid_1000306 = 1000306;
			/// <summary>PID: 1000306 | Type: read</summary>
			public const int fleprovisionedflowstableoutgoingdcfinterfaceid = 1000306;
			/// <summary>PID: 1000307 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoutgoingdcfinterfacedynamiclink_1000307 = 1000307;
			/// <summary>PID: 1000307 | Type: read</summary>
			public const int fleprovisionedflowstableoutgoingdcfinterfacedynamiclink = 1000307;
			/// <summary>PID: 1000308 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoptionalsourceidentifier_1000308 = 1000308;
			/// <summary>PID: 1000308 | Type: read</summary>
			public const int fleprovisionedflowstableoptionalsourceidentifier = 1000308;
			/// <summary>PID: 1000309 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoptionaldestinationidentifier_1000309 = 1000309;
			/// <summary>PID: 1000309 | Type: read</summary>
			public const int fleprovisionedflowstableoptionaldestinationidentifier = 1000309;
			/// <summary>PID: 1000310 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationip_1000310 = 1000310;
			/// <summary>PID: 1000310 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationip = 1000310;
			/// <summary>PID: 1000311 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationport_1000311 = 1000311;
			/// <summary>PID: 1000311 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationport = 1000311;
			/// <summary>PID: 1000312 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstablesourceip_1000312 = 1000312;
			/// <summary>PID: 1000312 | Type: read</summary>
			public const int fleprovisionedflowstablesourceip = 1000312;
			/// <summary>PID: 1000313 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableextradata_1000313 = 1000313;
			/// <summary>PID: 1000313 | Type: read</summary>
			public const int fleprovisionedflowstableextradata = 1000313;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableid_1000301 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int fleprovisionedflowstableid = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstablesourceid_1000302 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int fleprovisionedflowstablesourceid = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationid_1000303 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationid = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableincomingdcfinterfaceid_1000304 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int fleprovisionedflowstableincomingdcfinterfaceid = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableincomingdcfinterfacedynamiclink_1000305 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int fleprovisionedflowstableincomingdcfinterfacedynamiclink = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoutgoingdcfinterfaceid_1000306 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int fleprovisionedflowstableoutgoingdcfinterfaceid = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoutgoingdcfinterfacedynamiclink_1000307 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int fleprovisionedflowstableoutgoingdcfinterfacedynamiclink = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoptionalsourceidentifier_1000308 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int fleprovisionedflowstableoptionalsourceidentifier = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableoptionaldestinationidentifier_1000309 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int fleprovisionedflowstableoptionaldestinationidentifier = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationip_1000310 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationip = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstabledestinationport_1000311 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int fleprovisionedflowstabledestinationport = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstablesourceip_1000312 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int fleprovisionedflowstablesourceip = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int fleprovisionedflowstableextradata_1000313 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int fleprovisionedflowstableextradata = 12;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 1000158  | Type: write</summary>
	public System.Object Fleincomingflowstableexpectedrxbitrate {get { return Protocol.GetParameter(1000158); }set { Protocol.SetParameter(1000158, value); }}
	/// <summary>PID: 1000165  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleincomingflowstabledelete {get { return Protocol.GetParameter(1000165); }set { Protocol.SetParameter(1000165, value); }}
	/// <summary>PID: 1000258  | Type: write</summary>
	public System.Object Fleoutgoingflowstableexpectedtxbitrate {get { return Protocol.GetParameter(1000258); }set { Protocol.SetParameter(1000258, value); }}
	/// <summary>PID: 1000265  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleoutgoingflowstabledelete {get { return Protocol.GetParameter(1000265); }set { Protocol.SetParameter(1000265, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 1000000</summary>
	FleinterfacesoverviewtableQActionTable fleinterfacesoverviewtable { get; set; }
	/// <summary>PID: 1000100</summary>
	FleincomingflowstableQActionTable fleincomingflowstable { get; set; }
	/// <summary>PID: 1000200</summary>
	FleoutgoingflowstableQActionTable fleoutgoingflowstable { get; set; }
	/// <summary>PID: 1000300</summary>
	FleprovisionedflowstableQActionTable fleprovisionedflowstable { get; set; }
	object Afterstartup_dummy { get; set; }
	object Fleinterfacesoverviewtableindex_1000001 { get; set; }
	object Fleinterfacesoverviewtableindex { get; set; }
	object Fleinterfacesoverviewtabledescription_1000002 { get; set; }
	object Fleinterfacesoverviewtabledescription { get; set; }
	object Fleinterfacesoverviewtabletype_1000003 { get; set; }
	object Fleinterfacesoverviewtabletype { get; set; }
	object Fleinterfacesoverviewtableadminstatus_1000004 { get; set; }
	object Fleinterfacesoverviewtableadminstatus { get; set; }
	object Fleinterfacesoverviewtableoperstatus_1000005 { get; set; }
	object Fleinterfacesoverviewtableoperstatus { get; set; }
	object Fleinterfacesoverviewtabledisplaykey_1000006 { get; set; }
	object Fleinterfacesoverviewtabledisplaykey { get; set; }
	object Fleinterfacesoverviewtablerxbitrate_1000007 { get; set; }
	object Fleinterfacesoverviewtablerxbitrate { get; set; }
	object Fleinterfacesoverviewtablerxflows_1000008 { get; set; }
	object Fleinterfacesoverviewtablerxflows { get; set; }
	object Fleinterfacesoverviewtabletxbitrate_1000009 { get; set; }
	object Fleinterfacesoverviewtabletxbitrate { get; set; }
	object Fleinterfacesoverviewtabletxflows_1000010 { get; set; }
	object Fleinterfacesoverviewtabletxflows { get; set; }
	object Fleinterfacesoverviewtablerxutilization_1000011 { get; set; }
	object Fleinterfacesoverviewtablerxutilization { get; set; }
	object Fleinterfacesoverviewtabletxutilization_1000012 { get; set; }
	object Fleinterfacesoverviewtabletxutilization { get; set; }
	object Fleinterfacesoverviewtableexpectedrxbitrate_1000013 { get; set; }
	object Fleinterfacesoverviewtableexpectedrxbitrate { get; set; }
	object Fleinterfacesoverviewtableexpectedrxbitratestatus_1000014 { get; set; }
	object Fleinterfacesoverviewtableexpectedrxbitratestatus { get; set; }
	object Fleinterfacesoverviewtableexpectedrxflows_1000015 { get; set; }
	object Fleinterfacesoverviewtableexpectedrxflows { get; set; }
	object Fleinterfacesoverviewtableexpectedrxflowsstatus_1000016 { get; set; }
	object Fleinterfacesoverviewtableexpectedrxflowsstatus { get; set; }
	object Fleinterfacesoverviewtableexpectedtxbitrate_1000017 { get; set; }
	object Fleinterfacesoverviewtableexpectedtxbitrate { get; set; }
	object Fleinterfacesoverviewtableexpectedtxbitratestatus_1000018 { get; set; }
	object Fleinterfacesoverviewtableexpectedtxbitratestatus { get; set; }
	object Fleinterfacesoverviewtableexpectedtxflows_1000019 { get; set; }
	object Fleinterfacesoverviewtableexpectedtxflows { get; set; }
	object Fleinterfacesoverviewtableexpectedtxflowsstatus_1000020 { get; set; }
	object Fleinterfacesoverviewtableexpectedtxflowsstatus { get; set; }
	object Fleinterfacesoverviewtabledcfinterfaceid_1000021 { get; set; }
	object Fleinterfacesoverviewtabledcfinterfaceid { get; set; }
	object Fleincomingflowstableinstance_1000101 { get; set; }
	object Fleincomingflowstableinstance { get; set; }
	object Fleincomingflowstabledestinationip_1000102 { get; set; }
	object Fleincomingflowstabledestinationip { get; set; }
	object Fleincomingflowstabledestinationport_1000103 { get; set; }
	object Fleincomingflowstabledestinationport { get; set; }
	object Fleincomingflowstablesourceip_1000104 { get; set; }
	object Fleincomingflowstablesourceip { get; set; }
	object Fleincomingflowstableincominginterface_1000105 { get; set; }
	object Fleincomingflowstableincominginterface { get; set; }
	object Fleincomingflowstabletransporttype_1000106 { get; set; }
	object Fleincomingflowstabletransporttype { get; set; }
	object Fleincomingflowstablerxbitrate_1000107 { get; set; }
	object Fleincomingflowstablerxbitrate { get; set; }
	object Fleincomingflowstableexpectedrxbitrate_1000108 { get; set; }
	object Fleincomingflowstableexpectedrxbitrate { get; set; }
	object Fleincomingflowstableexpectedrxbitratestatus_1000109 { get; set; }
	object Fleincomingflowstableexpectedrxbitratestatus { get; set; }
	object Fleincomingflowstablelabel_1000110 { get; set; }
	object Fleincomingflowstablelabel { get; set; }
	object Fleincomingflowstablefkoutgoing_1000111 { get; set; }
	object Fleincomingflowstablefkoutgoing { get; set; }
	object Fleincomingflowstablelinkedflow_1000112 { get; set; }
	object Fleincomingflowstablelinkedflow { get; set; }
	object Fleincomingflowstableflowowner_1000113 { get; set; }
	object Fleincomingflowstableflowowner { get; set; }
	object Fleincomingflowstablepresent_1000114 { get; set; }
	object Fleincomingflowstablepresent { get; set; }
	object Fleincomingflowstableexpectedrxbitrate_1000158 { get; set; }
	object Fleincomingflowstabledelete_1000165 { get; set; }
	object Fleincomingflowstabledelete { get; set; }
	object Fleoutgoingflowstableinstance_1000201 { get; set; }
	object Fleoutgoingflowstableinstance { get; set; }
	object Fleoutgoingflowstabledestinationip_1000202 { get; set; }
	object Fleoutgoingflowstabledestinationip { get; set; }
	object Fleoutgoingflowstabledestinationport_1000203 { get; set; }
	object Fleoutgoingflowstabledestinationport { get; set; }
	object Fleoutgoingflowstablesourceip_1000204 { get; set; }
	object Fleoutgoingflowstablesourceip { get; set; }
	object Fleoutgoingflowstableoutgoinginterface_1000205 { get; set; }
	object Fleoutgoingflowstableoutgoinginterface { get; set; }
	object Fleoutgoingflowstabletransporttype_1000206 { get; set; }
	object Fleoutgoingflowstabletransporttype { get; set; }
	object Fleoutgoingflowstabletxbitrate_1000207 { get; set; }
	object Fleoutgoingflowstabletxbitrate { get; set; }
	object Fleoutgoingflowstableexpectedtxbitrate_1000208 { get; set; }
	object Fleoutgoingflowstableexpectedtxbitrate { get; set; }
	object Fleoutgoingflowstableexpectedtxbitratestatus_1000209 { get; set; }
	object Fleoutgoingflowstableexpectedtxbitratestatus { get; set; }
	object Fleoutgoingflowstablelabel_1000210 { get; set; }
	object Fleoutgoingflowstablelabel { get; set; }
	object Fleoutgoingflowstablefkincoming_1000211 { get; set; }
	object Fleoutgoingflowstablefkincoming { get; set; }
	object Fleoutgoingflowstablelinkedflow_1000212 { get; set; }
	object Fleoutgoingflowstablelinkedflow { get; set; }
	object Fleoutgoingflowstableflowowner_1000213 { get; set; }
	object Fleoutgoingflowstableflowowner { get; set; }
	object Fleoutgoingflowstablepresent_1000214 { get; set; }
	object Fleoutgoingflowstablepresent { get; set; }
	object Fleoutgoingflowstableexpectedtxbitrate_1000258 { get; set; }
	object Fleoutgoingflowstabledelete_1000265 { get; set; }
	object Fleoutgoingflowstabledelete { get; set; }
	object Fleprovisionedflowstableid_1000301 { get; set; }
	object Fleprovisionedflowstableid { get; set; }
	object Fleprovisionedflowstablesourceid_1000302 { get; set; }
	object Fleprovisionedflowstablesourceid { get; set; }
	object Fleprovisionedflowstabledestinationid_1000303 { get; set; }
	object Fleprovisionedflowstabledestinationid { get; set; }
	object Fleprovisionedflowstableincomingdcfinterfaceid_1000304 { get; set; }
	object Fleprovisionedflowstableincomingdcfinterfaceid { get; set; }
	object Fleprovisionedflowstableincomingdcfinterfacedynamiclink_1000305 { get; set; }
	object Fleprovisionedflowstableincomingdcfinterfacedynamiclink { get; set; }
	object Fleprovisionedflowstableoutgoingdcfinterfaceid_1000306 { get; set; }
	object Fleprovisionedflowstableoutgoingdcfinterfaceid { get; set; }
	object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink_1000307 { get; set; }
	object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink { get; set; }
	object Fleprovisionedflowstableoptionalsourceidentifier_1000308 { get; set; }
	object Fleprovisionedflowstableoptionalsourceidentifier { get; set; }
	object Fleprovisionedflowstableoptionaldestinationidentifier_1000309 { get; set; }
	object Fleprovisionedflowstableoptionaldestinationidentifier { get; set; }
	object Fleprovisionedflowstabledestinationip_1000310 { get; set; }
	object Fleprovisionedflowstabledestinationip { get; set; }
	object Fleprovisionedflowstabledestinationport_1000311 { get; set; }
	object Fleprovisionedflowstabledestinationport { get; set; }
	object Fleprovisionedflowstablesourceip_1000312 { get; set; }
	object Fleprovisionedflowstablesourceip { get; set; }
	object Fleprovisionedflowstableextradata_1000313 { get; set; }
	object Fleprovisionedflowstableextradata { get; set; }
	object Clp_interapp_receive_9000000 { get; set; }
	object Clp_interapp_receive { get; set; }
	object Clp_interapp_return_9000001 { get; set; }
	object Clp_interapp_return { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 1000000</summary>
	public FleinterfacesoverviewtableQActionTable fleinterfacesoverviewtable { get; set; }
	/// <summary>PID: 1000100</summary>
	public FleincomingflowstableQActionTable fleincomingflowstable { get; set; }
	/// <summary>PID: 1000200</summary>
	public FleoutgoingflowstableQActionTable fleoutgoingflowstable { get; set; }
	/// <summary>PID: 1000300</summary>
	public FleprovisionedflowstableQActionTable fleprovisionedflowstable { get; set; }
	/// <summary>PID: 2  | Type: dummy</summary>
	public System.Object Afterstartup_dummy {get { return GetParameter(2); }set { SetParameter(2, value); }}
	/// <summary>PID: 1000001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableindex_1000001 {get { return GetParameter(1000001); }set { SetParameter(1000001, value); }}
	/// <summary>PID: 1000001  | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableindex {get { return GetParameter(1000001); }set { SetParameter(1000001, value); }}
	/// <summary>PID: 1000002  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledescription_1000002 {get { return GetParameter(1000002); }set { SetParameter(1000002, value); }}
	/// <summary>PID: 1000002  | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabledescription {get { return GetParameter(1000002); }set { SetParameter(1000002, value); }}
	/// <summary>PID: 1000003  | Type: read | DISCREETS: Other = 0, Ethernet = 1, SDI = 2, ASI = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletype_1000003 {get { return GetParameter(1000003); }set { SetParameter(1000003, value); }}
	/// <summary>PID: 1000003  | Type: read | DISCREETS: Other = 0, Ethernet = 1, SDI = 2, ASI = 3</summary>
	public System.Object Fleinterfacesoverviewtabletype {get { return GetParameter(1000003); }set { SetParameter(1000003, value); }}
	/// <summary>PID: 1000004  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableadminstatus_1000004 {get { return GetParameter(1000004); }set { SetParameter(1000004, value); }}
	/// <summary>PID: 1000004  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	public System.Object Fleinterfacesoverviewtableadminstatus {get { return GetParameter(1000004); }set { SetParameter(1000004, value); }}
	/// <summary>PID: 1000005  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7, Admin Down = 10</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableoperstatus_1000005 {get { return GetParameter(1000005); }set { SetParameter(1000005, value); }}
	/// <summary>PID: 1000005  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7, Admin Down = 10</summary>
	public System.Object Fleinterfacesoverviewtableoperstatus {get { return GetParameter(1000005); }set { SetParameter(1000005, value); }}
	/// <summary>PID: 1000006  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledisplaykey_1000006 {get { return GetParameter(1000006); }set { SetParameter(1000006, value); }}
	/// <summary>PID: 1000006  | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabledisplaykey {get { return GetParameter(1000006); }set { SetParameter(1000006, value); }}
	/// <summary>PID: 1000007  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxbitrate_1000007 {get { return GetParameter(1000007); }set { SetParameter(1000007, value); }}
	/// <summary>PID: 1000007  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtablerxbitrate {get { return GetParameter(1000007); }set { SetParameter(1000007, value); }}
	/// <summary>PID: 1000008  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxflows_1000008 {get { return GetParameter(1000008); }set { SetParameter(1000008, value); }}
	/// <summary>PID: 1000008  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtablerxflows {get { return GetParameter(1000008); }set { SetParameter(1000008, value); }}
	/// <summary>PID: 1000009  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxbitrate_1000009 {get { return GetParameter(1000009); }set { SetParameter(1000009, value); }}
	/// <summary>PID: 1000009  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtabletxbitrate {get { return GetParameter(1000009); }set { SetParameter(1000009, value); }}
	/// <summary>PID: 1000010  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxflows_1000010 {get { return GetParameter(1000010); }set { SetParameter(1000010, value); }}
	/// <summary>PID: 1000010  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtabletxflows {get { return GetParameter(1000010); }set { SetParameter(1000010, value); }}
	/// <summary>PID: 1000011  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxutilization_1000011 {get { return GetParameter(1000011); }set { SetParameter(1000011, value); }}
	/// <summary>PID: 1000011  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtablerxutilization {get { return GetParameter(1000011); }set { SetParameter(1000011, value); }}
	/// <summary>PID: 1000012  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxutilization_1000012 {get { return GetParameter(1000012); }set { SetParameter(1000012, value); }}
	/// <summary>PID: 1000012  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtabletxutilization {get { return GetParameter(1000012); }set { SetParameter(1000012, value); }}
	/// <summary>PID: 1000013  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxbitrate_1000013 {get { return GetParameter(1000013); }set { SetParameter(1000013, value); }}
	/// <summary>PID: 1000013  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxbitrate {get { return GetParameter(1000013); }set { SetParameter(1000013, value); }}
	/// <summary>PID: 1000014  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxbitratestatus_1000014 {get { return GetParameter(1000014); }set { SetParameter(1000014, value); }}
	/// <summary>PID: 1000014  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxbitratestatus {get { return GetParameter(1000014); }set { SetParameter(1000014, value); }}
	/// <summary>PID: 1000015  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxflows_1000015 {get { return GetParameter(1000015); }set { SetParameter(1000015, value); }}
	/// <summary>PID: 1000015  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxflows {get { return GetParameter(1000015); }set { SetParameter(1000015, value); }}
	/// <summary>PID: 1000016  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxflowsstatus_1000016 {get { return GetParameter(1000016); }set { SetParameter(1000016, value); }}
	/// <summary>PID: 1000016  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxflowsstatus {get { return GetParameter(1000016); }set { SetParameter(1000016, value); }}
	/// <summary>PID: 1000017  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxbitrate_1000017 {get { return GetParameter(1000017); }set { SetParameter(1000017, value); }}
	/// <summary>PID: 1000017  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxbitrate {get { return GetParameter(1000017); }set { SetParameter(1000017, value); }}
	/// <summary>PID: 1000018  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxbitratestatus_1000018 {get { return GetParameter(1000018); }set { SetParameter(1000018, value); }}
	/// <summary>PID: 1000018  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxbitratestatus {get { return GetParameter(1000018); }set { SetParameter(1000018, value); }}
	/// <summary>PID: 1000019  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxflows_1000019 {get { return GetParameter(1000019); }set { SetParameter(1000019, value); }}
	/// <summary>PID: 1000019  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxflows {get { return GetParameter(1000019); }set { SetParameter(1000019, value); }}
	/// <summary>PID: 1000020  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxflowsstatus_1000020 {get { return GetParameter(1000020); }set { SetParameter(1000020, value); }}
	/// <summary>PID: 1000020  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxflowsstatus {get { return GetParameter(1000020); }set { SetParameter(1000020, value); }}
	/// <summary>PID: 1000021  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledcfinterfaceid_1000021 {get { return GetParameter(1000021); }set { SetParameter(1000021, value); }}
	/// <summary>PID: 1000021  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleinterfacesoverviewtabledcfinterfaceid {get { return GetParameter(1000021); }set { SetParameter(1000021, value); }}
	/// <summary>PID: 1000101  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableinstance_1000101 {get { return GetParameter(1000101); }set { SetParameter(1000101, value); }}
	/// <summary>PID: 1000101  | Type: read</summary>
	public System.Object Fleincomingflowstableinstance {get { return GetParameter(1000101); }set { SetParameter(1000101, value); }}
	/// <summary>PID: 1000102  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabledestinationip_1000102 {get { return GetParameter(1000102); }set { SetParameter(1000102, value); }}
	/// <summary>PID: 1000102  | Type: read</summary>
	public System.Object Fleincomingflowstabledestinationip {get { return GetParameter(1000102); }set { SetParameter(1000102, value); }}
	/// <summary>PID: 1000103  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabledestinationport_1000103 {get { return GetParameter(1000103); }set { SetParameter(1000103, value); }}
	/// <summary>PID: 1000103  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleincomingflowstabledestinationport {get { return GetParameter(1000103); }set { SetParameter(1000103, value); }}
	/// <summary>PID: 1000104  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablesourceip_1000104 {get { return GetParameter(1000104); }set { SetParameter(1000104, value); }}
	/// <summary>PID: 1000104  | Type: read</summary>
	public System.Object Fleincomingflowstablesourceip {get { return GetParameter(1000104); }set { SetParameter(1000104, value); }}
	/// <summary>PID: 1000105  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableincominginterface_1000105 {get { return GetParameter(1000105); }set { SetParameter(1000105, value); }}
	/// <summary>PID: 1000105  | Type: read</summary>
	public System.Object Fleincomingflowstableincominginterface {get { return GetParameter(1000105); }set { SetParameter(1000105, value); }}
	/// <summary>PID: 1000106  | Type: read | DISCREETS: Other = 0, IP = 1, SDI = 2, ASI = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabletransporttype_1000106 {get { return GetParameter(1000106); }set { SetParameter(1000106, value); }}
	/// <summary>PID: 1000106  | Type: read | DISCREETS: Other = 0, IP = 1, SDI = 2, ASI = 3</summary>
	public System.Object Fleincomingflowstabletransporttype {get { return GetParameter(1000106); }set { SetParameter(1000106, value); }}
	/// <summary>PID: 1000107  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablerxbitrate_1000107 {get { return GetParameter(1000107); }set { SetParameter(1000107, value); }}
	/// <summary>PID: 1000107  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleincomingflowstablerxbitrate {get { return GetParameter(1000107); }set { SetParameter(1000107, value); }}
	/// <summary>PID: 1000108  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableexpectedrxbitrate_1000108 {get { return GetParameter(1000108); }set { SetParameter(1000108, value); }}
	/// <summary>PID: 1000108  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleincomingflowstableexpectedrxbitrate {get { return GetParameter(1000108); }set { SetParameter(1000108, value); }}
	/// <summary>PID: 1000109  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableexpectedrxbitratestatus_1000109 {get { return GetParameter(1000109); }set { SetParameter(1000109, value); }}
	/// <summary>PID: 1000109  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleincomingflowstableexpectedrxbitratestatus {get { return GetParameter(1000109); }set { SetParameter(1000109, value); }}
	/// <summary>PID: 1000110  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablelabel_1000110 {get { return GetParameter(1000110); }set { SetParameter(1000110, value); }}
	/// <summary>PID: 1000110  | Type: read</summary>
	public System.Object Fleincomingflowstablelabel {get { return GetParameter(1000110); }set { SetParameter(1000110, value); }}
	/// <summary>PID: 1000111  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablefkoutgoing_1000111 {get { return GetParameter(1000111); }set { SetParameter(1000111, value); }}
	/// <summary>PID: 1000111  | Type: read</summary>
	public System.Object Fleincomingflowstablefkoutgoing {get { return GetParameter(1000111); }set { SetParameter(1000111, value); }}
	/// <summary>PID: 1000112  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablelinkedflow_1000112 {get { return GetParameter(1000112); }set { SetParameter(1000112, value); }}
	/// <summary>PID: 1000112  | Type: read</summary>
	public System.Object Fleincomingflowstablelinkedflow {get { return GetParameter(1000112); }set { SetParameter(1000112, value); }}
	/// <summary>PID: 1000113  | Type: read | DISCREETS: Local System = 0, Flow Engineering = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableflowowner_1000113 {get { return GetParameter(1000113); }set { SetParameter(1000113, value); }}
	/// <summary>PID: 1000113  | Type: read | DISCREETS: Local System = 0, Flow Engineering = 1</summary>
	public System.Object Fleincomingflowstableflowowner {get { return GetParameter(1000113); }set { SetParameter(1000113, value); }}
	/// <summary>PID: 1000114  | Type: read | DISCREETS: No = 0, Yes = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablepresent_1000114 {get { return GetParameter(1000114); }set { SetParameter(1000114, value); }}
	/// <summary>PID: 1000114  | Type: read | DISCREETS: No = 0, Yes = 1</summary>
	public System.Object Fleincomingflowstablepresent {get { return GetParameter(1000114); }set { SetParameter(1000114, value); }}
	/// <summary>PID: 1000158  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableexpectedrxbitrate_1000158 {get { return GetParameter(1000158); }set { SetParameter(1000158, value); }}
	/// <summary>PID: 1000165  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleincomingflowstabledelete_1000165 {get { return GetParameter(1000165); }set { SetParameter(1000165, value); }}
	/// <summary>PID: 1000165  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleincomingflowstabledelete {get { return Write.Fleincomingflowstabledelete; }set { Write.Fleincomingflowstabledelete = value; }}
	/// <summary>PID: 1000201  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableinstance_1000201 {get { return GetParameter(1000201); }set { SetParameter(1000201, value); }}
	/// <summary>PID: 1000201  | Type: read</summary>
	public System.Object Fleoutgoingflowstableinstance {get { return GetParameter(1000201); }set { SetParameter(1000201, value); }}
	/// <summary>PID: 1000202  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabledestinationip_1000202 {get { return GetParameter(1000202); }set { SetParameter(1000202, value); }}
	/// <summary>PID: 1000202  | Type: read</summary>
	public System.Object Fleoutgoingflowstabledestinationip {get { return GetParameter(1000202); }set { SetParameter(1000202, value); }}
	/// <summary>PID: 1000203  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabledestinationport_1000203 {get { return GetParameter(1000203); }set { SetParameter(1000203, value); }}
	/// <summary>PID: 1000203  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleoutgoingflowstabledestinationport {get { return GetParameter(1000203); }set { SetParameter(1000203, value); }}
	/// <summary>PID: 1000204  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablesourceip_1000204 {get { return GetParameter(1000204); }set { SetParameter(1000204, value); }}
	/// <summary>PID: 1000204  | Type: read</summary>
	public System.Object Fleoutgoingflowstablesourceip {get { return GetParameter(1000204); }set { SetParameter(1000204, value); }}
	/// <summary>PID: 1000205  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableoutgoinginterface_1000205 {get { return GetParameter(1000205); }set { SetParameter(1000205, value); }}
	/// <summary>PID: 1000205  | Type: read</summary>
	public System.Object Fleoutgoingflowstableoutgoinginterface {get { return GetParameter(1000205); }set { SetParameter(1000205, value); }}
	/// <summary>PID: 1000206  | Type: read | DISCREETS: Other = 0, IP = 1, SDI = 2, ASI = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabletransporttype_1000206 {get { return GetParameter(1000206); }set { SetParameter(1000206, value); }}
	/// <summary>PID: 1000206  | Type: read | DISCREETS: Other = 0, IP = 1, SDI = 2, ASI = 3</summary>
	public System.Object Fleoutgoingflowstabletransporttype {get { return GetParameter(1000206); }set { SetParameter(1000206, value); }}
	/// <summary>PID: 1000207  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabletxbitrate_1000207 {get { return GetParameter(1000207); }set { SetParameter(1000207, value); }}
	/// <summary>PID: 1000207  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleoutgoingflowstabletxbitrate {get { return GetParameter(1000207); }set { SetParameter(1000207, value); }}
	/// <summary>PID: 1000208  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableexpectedtxbitrate_1000208 {get { return GetParameter(1000208); }set { SetParameter(1000208, value); }}
	/// <summary>PID: 1000208  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleoutgoingflowstableexpectedtxbitrate {get { return GetParameter(1000208); }set { SetParameter(1000208, value); }}
	/// <summary>PID: 1000209  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableexpectedtxbitratestatus_1000209 {get { return GetParameter(1000209); }set { SetParameter(1000209, value); }}
	/// <summary>PID: 1000209  | Type: read | DISCREETS: Normal = 1, Unexpected Low = 2, Unexpected High = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleoutgoingflowstableexpectedtxbitratestatus {get { return GetParameter(1000209); }set { SetParameter(1000209, value); }}
	/// <summary>PID: 1000210  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablelabel_1000210 {get { return GetParameter(1000210); }set { SetParameter(1000210, value); }}
	/// <summary>PID: 1000210  | Type: read</summary>
	public System.Object Fleoutgoingflowstablelabel {get { return GetParameter(1000210); }set { SetParameter(1000210, value); }}
	/// <summary>PID: 1000211  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablefkincoming_1000211 {get { return GetParameter(1000211); }set { SetParameter(1000211, value); }}
	/// <summary>PID: 1000211  | Type: read</summary>
	public System.Object Fleoutgoingflowstablefkincoming {get { return GetParameter(1000211); }set { SetParameter(1000211, value); }}
	/// <summary>PID: 1000212  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablelinkedflow_1000212 {get { return GetParameter(1000212); }set { SetParameter(1000212, value); }}
	/// <summary>PID: 1000212  | Type: read</summary>
	public System.Object Fleoutgoingflowstablelinkedflow {get { return GetParameter(1000212); }set { SetParameter(1000212, value); }}
	/// <summary>PID: 1000213  | Type: read | DISCREETS: Local System = 0, Flow Engineering = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableflowowner_1000213 {get { return GetParameter(1000213); }set { SetParameter(1000213, value); }}
	/// <summary>PID: 1000213  | Type: read | DISCREETS: Local System = 0, Flow Engineering = 1</summary>
	public System.Object Fleoutgoingflowstableflowowner {get { return GetParameter(1000213); }set { SetParameter(1000213, value); }}
	/// <summary>PID: 1000214  | Type: read | DISCREETS: No = 0, Yes = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablepresent_1000214 {get { return GetParameter(1000214); }set { SetParameter(1000214, value); }}
	/// <summary>PID: 1000214  | Type: read | DISCREETS: No = 0, Yes = 1</summary>
	public System.Object Fleoutgoingflowstablepresent {get { return GetParameter(1000214); }set { SetParameter(1000214, value); }}
	/// <summary>PID: 1000258  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableexpectedtxbitrate_1000258 {get { return GetParameter(1000258); }set { SetParameter(1000258, value); }}
	/// <summary>PID: 1000265  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleoutgoingflowstabledelete_1000265 {get { return GetParameter(1000265); }set { SetParameter(1000265, value); }}
	/// <summary>PID: 1000265  | Type: write | DISCREETS: Delete = 1</summary>
	public System.Object Fleoutgoingflowstabledelete {get { return Write.Fleoutgoingflowstabledelete; }set { Write.Fleoutgoingflowstabledelete = value; }}
	/// <summary>PID: 1000301  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableid_1000301 {get { return GetParameter(1000301); }set { SetParameter(1000301, value); }}
	/// <summary>PID: 1000301  | Type: read</summary>
	public System.Object Fleprovisionedflowstableid {get { return GetParameter(1000301); }set { SetParameter(1000301, value); }}
	/// <summary>PID: 1000302  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstablesourceid_1000302 {get { return GetParameter(1000302); }set { SetParameter(1000302, value); }}
	/// <summary>PID: 1000302  | Type: read</summary>
	public System.Object Fleprovisionedflowstablesourceid {get { return GetParameter(1000302); }set { SetParameter(1000302, value); }}
	/// <summary>PID: 1000303  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationid_1000303 {get { return GetParameter(1000303); }set { SetParameter(1000303, value); }}
	/// <summary>PID: 1000303  | Type: read</summary>
	public System.Object Fleprovisionedflowstabledestinationid {get { return GetParameter(1000303); }set { SetParameter(1000303, value); }}
	/// <summary>PID: 1000304  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableincomingdcfinterfaceid_1000304 {get { return GetParameter(1000304); }set { SetParameter(1000304, value); }}
	/// <summary>PID: 1000304  | Type: read</summary>
	public System.Object Fleprovisionedflowstableincomingdcfinterfaceid {get { return GetParameter(1000304); }set { SetParameter(1000304, value); }}
	/// <summary>PID: 1000305  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableincomingdcfinterfacedynamiclink_1000305 {get { return GetParameter(1000305); }set { SetParameter(1000305, value); }}
	/// <summary>PID: 1000305  | Type: read</summary>
	public System.Object Fleprovisionedflowstableincomingdcfinterfacedynamiclink {get { return GetParameter(1000305); }set { SetParameter(1000305, value); }}
	/// <summary>PID: 1000306  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfaceid_1000306 {get { return GetParameter(1000306); }set { SetParameter(1000306, value); }}
	/// <summary>PID: 1000306  | Type: read</summary>
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfaceid {get { return GetParameter(1000306); }set { SetParameter(1000306, value); }}
	/// <summary>PID: 1000307  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink_1000307 {get { return GetParameter(1000307); }set { SetParameter(1000307, value); }}
	/// <summary>PID: 1000307  | Type: read</summary>
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink {get { return GetParameter(1000307); }set { SetParameter(1000307, value); }}
	/// <summary>PID: 1000308  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoptionalsourceidentifier_1000308 {get { return GetParameter(1000308); }set { SetParameter(1000308, value); }}
	/// <summary>PID: 1000308  | Type: read</summary>
	public System.Object Fleprovisionedflowstableoptionalsourceidentifier {get { return GetParameter(1000308); }set { SetParameter(1000308, value); }}
	/// <summary>PID: 1000309  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoptionaldestinationidentifier_1000309 {get { return GetParameter(1000309); }set { SetParameter(1000309, value); }}
	/// <summary>PID: 1000309  | Type: read</summary>
	public System.Object Fleprovisionedflowstableoptionaldestinationidentifier {get { return GetParameter(1000309); }set { SetParameter(1000309, value); }}
	/// <summary>PID: 1000310  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationip_1000310 {get { return GetParameter(1000310); }set { SetParameter(1000310, value); }}
	/// <summary>PID: 1000310  | Type: read</summary>
	public System.Object Fleprovisionedflowstabledestinationip {get { return GetParameter(1000310); }set { SetParameter(1000310, value); }}
	/// <summary>PID: 1000311  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationport_1000311 {get { return GetParameter(1000311); }set { SetParameter(1000311, value); }}
	/// <summary>PID: 1000311  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Fleprovisionedflowstabledestinationport {get { return GetParameter(1000311); }set { SetParameter(1000311, value); }}
	/// <summary>PID: 1000312  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstablesourceip_1000312 {get { return GetParameter(1000312); }set { SetParameter(1000312, value); }}
	/// <summary>PID: 1000312  | Type: read</summary>
	public System.Object Fleprovisionedflowstablesourceip {get { return GetParameter(1000312); }set { SetParameter(1000312, value); }}
	/// <summary>PID: 1000313  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableextradata_1000313 {get { return GetParameter(1000313); }set { SetParameter(1000313, value); }}
	/// <summary>PID: 1000313  | Type: read</summary>
	public System.Object Fleprovisionedflowstableextradata {get { return GetParameter(1000313); }set { SetParameter(1000313, value); }}
	/// <summary>PID: 9000000  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Clp_interapp_receive_9000000 {get { return GetParameter(9000000); }set { SetParameter(9000000, value); }}
	/// <summary>PID: 9000000  | Type: read</summary>
	public System.Object Clp_interapp_receive {get { return GetParameter(9000000); }set { SetParameter(9000000, value); }}
	/// <summary>PID: 9000001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Clp_interapp_return_9000001 {get { return GetParameter(9000001); }set { SetParameter(9000001, value); }}
	/// <summary>PID: 9000001  | Type: read</summary>
	public System.Object Clp_interapp_return {get { return GetParameter(9000001); }set { SetParameter(9000001, value); }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		fleinterfacesoverviewtable = new FleinterfacesoverviewtableQActionTable(this, 1000000, "fleinterfacesoverviewtable");
		fleincomingflowstable = new FleincomingflowstableQActionTable(this, 1000100, "fleincomingflowstable");
		fleoutgoingflowstable = new FleoutgoingflowstableQActionTable(this, 1000200, "fleoutgoingflowstable");
		fleprovisionedflowstable = new FleprovisionedflowstableQActionTable(this, 1000300, "fleprovisionedflowstable");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class FleinterfacesoverviewtableQActionTable : QActionTable, IEnumerable<FleinterfacesoverviewtableQActionRow>
{
	public FleinterfacesoverviewtableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<FleinterfacesoverviewtableQActionRow> GetEnumerator() { return new QActionTableEnumerator<FleinterfacesoverviewtableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class FleincomingflowstableQActionTable : QActionTable, IEnumerable<FleincomingflowstableQActionRow>
{
	public FleincomingflowstableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<FleincomingflowstableQActionRow> GetEnumerator() { return new QActionTableEnumerator<FleincomingflowstableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class FleoutgoingflowstableQActionTable : QActionTable, IEnumerable<FleoutgoingflowstableQActionRow>
{
	public FleoutgoingflowstableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<FleoutgoingflowstableQActionRow> GetEnumerator() { return new QActionTableEnumerator<FleoutgoingflowstableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class FleprovisionedflowstableQActionTable : QActionTable, IEnumerable<FleprovisionedflowstableQActionRow>
{
	public FleprovisionedflowstableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<FleprovisionedflowstableQActionRow> GetEnumerator() { return new QActionTableEnumerator<FleprovisionedflowstableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class FleinterfacesoverviewtableQActionRow : QActionTableRow
{
	/// <summary>PID: 1000001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableindex_1000001 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000001 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000002 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledescription_1000002 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000002 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabledescription { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000003 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletype_1000003 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000003 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabletype { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000004 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableadminstatus_1000004 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000004 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableadminstatus { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000005 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableoperstatus_1000005 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000005 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableoperstatus { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000006 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledisplaykey_1000006 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000006 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabledisplaykey { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000007 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxbitrate_1000007 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000007 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtablerxbitrate { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000008 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxflows_1000008 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000008 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtablerxflows { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000009 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxbitrate_1000009 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000009 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabletxbitrate { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000010 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxflows_1000010 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000010 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabletxflows { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000011 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtablerxutilization_1000011 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000011 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtablerxutilization { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000012 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabletxutilization_1000012 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000012 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabletxutilization { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000013 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxbitrate_1000013 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000013 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxbitrate { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000014 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxbitratestatus_1000014 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000014 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxbitratestatus { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000015 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxflows_1000015 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1000015 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxflows { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1000016 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedrxflowsstatus_1000016 { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1000016 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedrxflowsstatus { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1000017 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxbitrate_1000017 { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1000017 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxbitrate { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1000018 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxbitratestatus_1000018 { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1000018 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxbitratestatus { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1000019 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxflows_1000019 { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1000019 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxflows { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1000020 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtableexpectedtxflowsstatus_1000020 { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1000020 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtableexpectedtxflowsstatus { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1000021 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleinterfacesoverviewtabledcfinterfaceid_1000021 { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1000021 | Type: read</summary>
	public System.Object Fleinterfacesoverviewtabledcfinterfaceid { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	public FleinterfacesoverviewtableQActionRow() : base(0, 21) { }
	public FleinterfacesoverviewtableQActionRow(System.Object[] oRow) : base(0, 21, oRow) { }
	public static implicit operator FleinterfacesoverviewtableQActionRow(System.Object[] source) { return new FleinterfacesoverviewtableQActionRow(source); }
	public static implicit operator System.Object[](FleinterfacesoverviewtableQActionRow source) { return source.ToObjectArray(); }
	public System.String[] GetChildKeysFleincomingflowstableFleincomingflowstableincominginterface(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000105, Key); }
	public System.String[] GetChildKeysFleoutgoingflowstableFleoutgoingflowstableoutgoinginterface(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000205, Key); }
}
/// <summary>IDX: 0</summary>
public class FleincomingflowstableQActionRow : QActionTableRow
{
	/// <summary>PID: 1000101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableinstance_1000101 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000101 | Type: read</summary>
	public System.Object Fleincomingflowstableinstance { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000102 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabledestinationip_1000102 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000102 | Type: read</summary>
	public System.Object Fleincomingflowstabledestinationip { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000103 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabledestinationport_1000103 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000103 | Type: read</summary>
	public System.Object Fleincomingflowstabledestinationport { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000104 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablesourceip_1000104 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000104 | Type: read</summary>
	public System.Object Fleincomingflowstablesourceip { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000105 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableincominginterface_1000105 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000105 | Type: read</summary>
	public System.Object Fleincomingflowstableincominginterface { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000106 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstabletransporttype_1000106 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000106 | Type: read</summary>
	public System.Object Fleincomingflowstabletransporttype { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000107 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablerxbitrate_1000107 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000107 | Type: read</summary>
	public System.Object Fleincomingflowstablerxbitrate { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000108 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableexpectedrxbitrate_1000108 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000108 | Type: read</summary>
	public System.Object Fleincomingflowstableexpectedrxbitrate { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000109 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableexpectedrxbitratestatus_1000109 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000109 | Type: read</summary>
	public System.Object Fleincomingflowstableexpectedrxbitratestatus { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000110 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablelabel_1000110 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000110 | Type: read</summary>
	public System.Object Fleincomingflowstablelabel { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000111 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablefkoutgoing_1000111 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000111 | Type: read</summary>
	public System.Object Fleincomingflowstablefkoutgoing { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000112 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablelinkedflow_1000112 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000112 | Type: read</summary>
	public System.Object Fleincomingflowstablelinkedflow { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000113 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstableflowowner_1000113 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000113 | Type: read</summary>
	public System.Object Fleincomingflowstableflowowner { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000114 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleincomingflowstablepresent_1000114 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000114 | Type: read</summary>
	public System.Object Fleincomingflowstablepresent { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000165 | Type: write</summary>
	public System.Object Fleincomingflowstabledelete_1000165 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1000165 | Type: write</summary>
	public System.Object Fleincomingflowstabledelete { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	public FleincomingflowstableQActionRow() : base(0, 15) { }
	public FleincomingflowstableQActionRow(System.Object[] oRow) : base(0, 15, oRow) { }
	public static implicit operator FleincomingflowstableQActionRow(System.Object[] source) { return new FleincomingflowstableQActionRow(source); }
	public static implicit operator System.Object[](FleincomingflowstableQActionRow source) { return source.ToObjectArray(); }
	public System.Object[] GetParentRowFleinterfacesoverviewtableFleincomingflowstableincominginterface(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000000, (System.String)Fleincomingflowstableincominginterface); }
	public System.Object[] GetParentRowFleoutgoingflowstableFleincomingflowstablefkoutgoing(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000200, (System.String)Fleincomingflowstablefkoutgoing); }
	public System.Object[] GetParentRowFleprovisionedflowstableFleincomingflowstablelinkedflow(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000300, (System.String)Fleincomingflowstablelinkedflow); }
	public System.String[] GetChildKeysFleoutgoingflowstableFleoutgoingflowstablefkincoming(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000211, Key); }
}
/// <summary>IDX: 0</summary>
public class FleoutgoingflowstableQActionRow : QActionTableRow
{
	/// <summary>PID: 1000201 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableinstance_1000201 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000201 | Type: read</summary>
	public System.Object Fleoutgoingflowstableinstance { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000202 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabledestinationip_1000202 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000202 | Type: read</summary>
	public System.Object Fleoutgoingflowstabledestinationip { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000203 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabledestinationport_1000203 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000203 | Type: read</summary>
	public System.Object Fleoutgoingflowstabledestinationport { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000204 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablesourceip_1000204 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000204 | Type: read</summary>
	public System.Object Fleoutgoingflowstablesourceip { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000205 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableoutgoinginterface_1000205 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000205 | Type: read</summary>
	public System.Object Fleoutgoingflowstableoutgoinginterface { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000206 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabletransporttype_1000206 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000206 | Type: read</summary>
	public System.Object Fleoutgoingflowstabletransporttype { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000207 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstabletxbitrate_1000207 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000207 | Type: read</summary>
	public System.Object Fleoutgoingflowstabletxbitrate { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000208 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableexpectedtxbitrate_1000208 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000208 | Type: read</summary>
	public System.Object Fleoutgoingflowstableexpectedtxbitrate { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000209 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableexpectedtxbitratestatus_1000209 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000209 | Type: read</summary>
	public System.Object Fleoutgoingflowstableexpectedtxbitratestatus { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000210 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablelabel_1000210 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000210 | Type: read</summary>
	public System.Object Fleoutgoingflowstablelabel { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000211 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablefkincoming_1000211 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000211 | Type: read</summary>
	public System.Object Fleoutgoingflowstablefkincoming { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000212 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablelinkedflow_1000212 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000212 | Type: read</summary>
	public System.Object Fleoutgoingflowstablelinkedflow { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000213 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstableflowowner_1000213 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000213 | Type: read</summary>
	public System.Object Fleoutgoingflowstableflowowner { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000214 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleoutgoingflowstablepresent_1000214 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000214 | Type: read</summary>
	public System.Object Fleoutgoingflowstablepresent { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1000265 | Type: write</summary>
	public System.Object Fleoutgoingflowstabledelete_1000265 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1000265 | Type: write</summary>
	public System.Object Fleoutgoingflowstabledelete { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	public FleoutgoingflowstableQActionRow() : base(0, 15) { }
	public FleoutgoingflowstableQActionRow(System.Object[] oRow) : base(0, 15, oRow) { }
	public static implicit operator FleoutgoingflowstableQActionRow(System.Object[] source) { return new FleoutgoingflowstableQActionRow(source); }
	public static implicit operator System.Object[](FleoutgoingflowstableQActionRow source) { return source.ToObjectArray(); }
	public System.Object[] GetParentRowFleinterfacesoverviewtableFleoutgoingflowstableoutgoinginterface(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000000, (System.String)Fleoutgoingflowstableoutgoinginterface); }
	public System.Object[] GetParentRowFleincomingflowstableFleoutgoingflowstablefkincoming(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000100, (System.String)Fleoutgoingflowstablefkincoming); }
	public System.Object[] GetParentRowFleprovisionedflowstableFleoutgoingflowstablelinkedflow(SLProtocol protocol) { return (System.Object[])protocol.GetRow(1000300, (System.String)Fleoutgoingflowstablelinkedflow); }
	public System.String[] GetChildKeysFleincomingflowstableFleincomingflowstablefkoutgoing(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000111, Key); }
}
/// <summary>IDX: 0</summary>
public class FleprovisionedflowstableQActionRow : QActionTableRow
{
	/// <summary>PID: 1000301 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableid_1000301 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000301 | Type: read</summary>
	public System.Object Fleprovisionedflowstableid { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1000302 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstablesourceid_1000302 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000302 | Type: read</summary>
	public System.Object Fleprovisionedflowstablesourceid { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1000303 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationid_1000303 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000303 | Type: read</summary>
	public System.Object Fleprovisionedflowstabledestinationid { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1000304 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableincomingdcfinterfaceid_1000304 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000304 | Type: read</summary>
	public System.Object Fleprovisionedflowstableincomingdcfinterfaceid { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1000305 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableincomingdcfinterfacedynamiclink_1000305 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000305 | Type: read</summary>
	public System.Object Fleprovisionedflowstableincomingdcfinterfacedynamiclink { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1000306 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfaceid_1000306 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000306 | Type: read</summary>
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfaceid { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1000307 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink_1000307 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000307 | Type: read</summary>
	public System.Object Fleprovisionedflowstableoutgoingdcfinterfacedynamiclink { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1000308 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoptionalsourceidentifier_1000308 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000308 | Type: read</summary>
	public System.Object Fleprovisionedflowstableoptionalsourceidentifier { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1000309 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableoptionaldestinationidentifier_1000309 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000309 | Type: read</summary>
	public System.Object Fleprovisionedflowstableoptionaldestinationidentifier { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1000310 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationip_1000310 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000310 | Type: read</summary>
	public System.Object Fleprovisionedflowstabledestinationip { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1000311 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstabledestinationport_1000311 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000311 | Type: read</summary>
	public System.Object Fleprovisionedflowstabledestinationport { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1000312 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstablesourceip_1000312 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000312 | Type: read</summary>
	public System.Object Fleprovisionedflowstablesourceip { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1000313 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Fleprovisionedflowstableextradata_1000313 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1000313 | Type: read</summary>
	public System.Object Fleprovisionedflowstableextradata { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	public FleprovisionedflowstableQActionRow() : base(0, 13) { }
	public FleprovisionedflowstableQActionRow(System.Object[] oRow) : base(0, 13, oRow) { }
	public static implicit operator FleprovisionedflowstableQActionRow(System.Object[] source) { return new FleprovisionedflowstableQActionRow(source); }
	public static implicit operator System.Object[](FleprovisionedflowstableQActionRow source) { return source.ToObjectArray(); }
	public System.String[] GetChildKeysFleincomingflowstableFleincomingflowstablelinkedflow(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000112, Key); }
	public System.String[] GetChildKeysFleoutgoingflowstableFleoutgoingflowstablelinkedflow(SLProtocol protocol) { return (System.String[])protocol.NotifyProtocol(196, 1000212, Key); }
}
}
